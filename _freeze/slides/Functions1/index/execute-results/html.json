{
  "hash": "d93feda6109f045b82994bee54a7e3d4",
  "result": {
    "markdown": "---\ntitle: \"R Course - Day 3\"\nsubtitle: \"Functions I\"\nformat:\n  emc-revealjs:\n    toc: true\n    toc-depth: 1\n    menu: true\nexecute:\n  echo: true\ncategories: [Day3]\nimage: \"image.png\"\n---\n\n\n## Arithmetic Operators {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nR can simply be used as a *calculator*.\n\n::: columns\n::: {.column style=\"width: 45%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\ny <- 3\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13\n```\n:::\n\n```{.r .cell-code}\nx - y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\nx * y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n:::\n\n:::\n\n::: {.column style=\"width: 45%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nx / y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.333333\n```\n:::\n\n```{.r .cell-code}\nx ^ y   # exponentiation\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1000\n```\n:::\n\n```{.r .cell-code}\nx %% y  # modular arithmetic\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nx %/% y  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n:::\n:::\n\n## How these functions work on vectors {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n::: columns\n::: {.column style=\"width: 45%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\na_vector <- 1:10\n# x is recycled without warning\na_vector + x                   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 11 12 13 14 15 16 17 18 19 20\n```\n:::\n\n```{.r .cell-code}\na_vector + a_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  2  4  6  8 10 12 14 16 18 20\n```\n:::\n:::\n\n:::\n\n::: {.column style=\"width: 45%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_of_thr <- c(2, 4, 6)\n# recycled with a warning\na_vector + vec_of_thr\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in a_vector + vec_of_thr: longer object length is not a multiple of\nshorter object length\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  3  6  9  6  9 12  9 12 15 12\n```\n:::\n\n```{.r .cell-code}\nvec_of_fi <- c(1, 2, 3, 4, 5)\n# recycled without warning\na_vector + vec_of_fi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  2  4  6  8 10  7  9 11 13 15\n```\n:::\n:::\n\n:::\n:::\n\n## How these functions work on matrices {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nano_matrix <- matrix(1:12,ncol=4)\nano_matrix + x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]   11   14   17   20\n[2,]   12   15   18   21\n[3,]   13   16   19   22\n```\n:::\n\n```{.r .cell-code}\nano_matrix + ano_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    2    8   14   20\n[2,]    4   10   16   22\n[3,]    6   12   18   24\n```\n:::\n\n```{.r .cell-code}\nano_matrix * ano_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1   16   49  100\n[2,]    4   25   64  121\n[3,]    9   36   81  144\n```\n:::\n:::\n\n\n## Relational Operators {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Previously we defined x as 10 and y as 3\nx < y   #Smaller than\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nx > y   #Larger than\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nx <= y  #Smaller or equal to\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nx >= y  #Larger or equal to\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nx == y  #Equal to (use two '=')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nx != y  #Not equal to (! means 'not')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Logical Operators {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nThese operate on logical (`TRUE` or `FALSE`) expressions and return `TRUE` or `FALSE` or `TRUE`/`FALSE` vectors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n&&  # \"And\"   for logical scalars (single values)\n||  # \"Or\"    for logical scalars\n!   # \"Not\"   for logical scalars or vectors\n&   # \"And\"   for logical vectors (multiple values)\n|   # \"Or\"    for logical vectors\n```\n:::\n\n\n## Logical Operations on Scalar Logical Expressions {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE && TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nTRUE && FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nFALSE || TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE || FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Combine logical and relational operators {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nInside a range of numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 75\nx > 60 && x < 70\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nOutside a range of numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx < 60 || x > 70\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Combine with if() else() statement {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\ny <- 5\n\nif(x < 10 && y < 10) {\n  print(\"Both less than 10\")\n} else {\n  print(\"Not both less than 10\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Both less than 10\"\n```\n:::\n:::\n\n\n## Not!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n!FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n!(6 < 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Logical Operations on Logical Vectors {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nDifference between `&` and `&&`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(TRUE, FALSE, TRUE) && c(TRUE, TRUE, FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in c(TRUE, FALSE, TRUE) && c(TRUE, TRUE, FALSE): 'length(x) = 3 > 1' in\ncoercion to 'logical(1)'\n\nWarning in c(TRUE, FALSE, TRUE) && c(TRUE, TRUE, FALSE): 'length(x) = 3 > 1' in\ncoercion to 'logical(1)'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(TRUE, FALSE, TRUE) & c(TRUE, TRUE, FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n## Logical Operations with ifelse() {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystolic <- c(110, 119, 111, 113, 128)\ndiastolic <- c(70, 74, 88, 74, 83)\n\nclassification <- ifelse(systolic < 120 & diastolic < 80, \n                         yes = \"Normal\", \n                         no = \"Abnormal\")\nclassification\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Normal\"   \"Normal\"   \"Abnormal\" \"Normal\"   \"Abnormal\"\n```\n:::\n:::\n\n\n## Logical Operations for subsetting {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbpData <- data.frame(\n  name = c(\"Joe\", \"Katy\", \"Bill\", \"Kim\", \"Mark\"),\n  systolic = c(110, 119, 111, 113, 128),\n  diastolic = c(70, 74, 88, 74, 83)\n)\n\nbpData\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  name systolic diastolic\n1  Joe      110        70\n2 Katy      119        74\n3 Bill      111        88\n4  Kim      113        74\n5 Mark      128        83\n```\n:::\n\n```{.r .cell-code}\nbpData[bpData$systolic < 120 & bpData$diastolic < 80, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  name systolic diastolic\n1  Joe      110        70\n2 Katy      119        74\n4  Kim      113        74\n```\n:::\n:::\n\n\n## Built-in Named Functions {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr() #Print structure of an object\nclass() #Print class of an object\nhead() #First six elements/rows\ntail() #Last six elements/rows\nls() #List all objects you made\nseq(from=1, to=10, by=2) #Create a sequence\n```\n:::\n\n\nBuilt-in functions in base-R :\n\n<https://stat.ethz.ch/R-manual/R-patched/library/base/html/00Index.html>\n\n## Function arguments {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n***arguments***, the object in the parentheses `( )`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.414214\n```\n:::\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2\nsqrt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.414214\n```\n:::\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(x^2 + 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n## Functions with multiple arguments {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(round)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, digits = 0) \nNULL\n```\n:::\n\n```{.r .cell-code}\nround(4.679, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.68\n```\n:::\n:::\n\n\n`digits` is optional and defaults to 0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(4.679)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n## Named Argument Matching {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(x = 4.679, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.68\n```\n:::\n\n```{.r .cell-code}\nround(digits = 2, x = 4.679)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.68\n```\n:::\n:::\n\n\nMixing is possible:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(4.679, digits=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.68\n```\n:::\n\n```{.r .cell-code}\nround(digits=2, 4.679)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.68\n```\n:::\n:::\n\n\n## If? Then! Else? {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\nConditional execution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition) {\n  statement1\n}\n```\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition) {\n  statement1\n} else {\n  statement2\n}\n```\n:::\n\n\n## Example {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (x >= 10) {\n  y <- 1\n} else {\n    y <- 0\n}\n\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nOneliner:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- if(x >= 10) 1 else 0\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\nBeware!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- if(x >= 10) 1 #no else\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n## Returning some value based on a condition {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmySign <- function(x) {\n    if(x < 0) {\n      return(\"Negative\")\n    } else {\n      return(\"Non-negative\")\n    }\n}\n\nmySign(13)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Non-negative\"\n```\n:::\n:::\n\n\n## Nested `if()` Statements {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n`if` inside an `if`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(condition1) {\n  if(condition2) {\n    statement1 \n  } else {\n    statement2\n  }\n}\n```\n:::\n\n\n## Stringing multiple if else together {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhatAnimalSound <- function(animal){\n  if(animal == \"cat\") {\n    return(\"Meow!\")\n  } else if (animal == \"frog\") {\n    return(\"Ribbit!\")\n  } else if (animal == \"dog\") {\n    return(\"Woof!\")\n  } else {\n    return(paste0(\"I don't know what sound a '\",animal,\"' makes...\"))\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwhatAnimalSound(\"dog\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Woof!\"\n```\n:::\n\n```{.r .cell-code}\nwhatAnimalSound(\"bird\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I don't know what sound a 'bird' makes...\"\n```\n:::\n:::\n\n\n## if-else on a vector: The `ifelse()` Function {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheight <- c(69, 71, 67, 66, 72, 71, 61, 65, 73, 70, 68, 74)\n\nif (height > 69){\n  print(\"tall\") \n} else {\n  print(\"short\")\n}\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in if (height > 69) {: the condition has length > 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhtCategory <- ifelse(height > 69, yes = \"tall\", no = \"short\")\n\nhtCategory\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"short\" \"tall\"  \"short\" \"short\" \"tall\"  \"tall\"  \"short\" \"short\" \"tall\" \n[10] \"tall\"  \"short\" \"tall\" \n```\n:::\n:::\n\n\nFor more complicated cases we can use `apply()`\n\n## Creating your own functions {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyFun <- function(arg1, arg2) {\n  ## Here you type expressions that use the arguments\n}\n\nmyFun(arg1, arg2)\n```\n:::\n\n\n## Returning a result\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo1 <- function(x, y){\n  z <- x + y\n  x\n  z\n}\n\ndo1(x = 1, y = 3) # Only z is returned\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndo2 <- function(x, y){\n  z <- x + y \n  return(x)\n  z\n}\n\ndo2(x = 1, y = 3) # z is ignored\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## Returning multiple values {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo3 <- function(x, y){ \n  z <- x + y \n  return(list(x, z))\n}\n\ndo3(x = 1, y = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndo4 <- function(x, y = 2){ \n  z1 <- x + y\n  z2 <- x * y \n  return(c(z1, z2))\n} \n\ndo4(x = 1) ## uses y = 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 2\n```\n:::\n\n```{.r .cell-code}\ndo4(x = 1, y = 3) ## overwrites default value of y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 3\n```\n:::\n:::\n\n\n## Function with multiple input values {data-background=\"./_extensions/emc/www/triangle1.svg\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeanOfAll <- function(...) {\n  x <- mean(c(...))\n  return(x)\n}\n\nusSales <- c(123,456,789)\neuropeSales <- c(100,1000,10000,100000)\notherSales <- c(50,100,150,200,250,300,350)\n\nmeanOfAll(usSales, europeSales, otherSales)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8133.429\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}